<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snail99 Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-23T13:05:11.286Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Snail99</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring源码学习(一)</title>
    <link href="http://yoursite.com/2018/08/20/spring01/"/>
    <id>http://yoursite.com/2018/08/20/spring01/</id>
    <published>2018-08-20T07:45:39.000Z</published>
    <updated>2018-08-23T13:05:11.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring源码学习–-IOC"><a href="#Spring源码学习–-IOC" class="headerlink" title="Spring源码学习– IOC"></a>Spring源码学习– IOC</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><ul><li><strong>IOC(Inversion of Control)控制反转:</strong> 控制反转就是把原先我们代码里面需要实现的对象创建,依赖的代码,反转给容器来帮忙实现.那么必然的我们需要创建一个容器,同时需要一种描述来让容器知道需要创建的对象与对象之间的关系.这个描述最具体的表现就是我们可配置的文件.</li><li><strong>DI(Dependency Injection)依赖注入:</strong> 就是指对象是被动接受依赖类而不是自己去找,换句话说就是指对象不是从容器中查找它的依赖类,而是在容器实例化对象的时候主动将它依赖的类注入给它.</li></ul><a id="more"></a><h2 id="2-Spring-IOC-体系结构"><a href="#2-Spring-IOC-体系结构" class="headerlink" title="2. Spring IOC 体系结构"></a>2. Spring IOC 体系结构</h2><h3 id="2-1-BeanFactory"><a href="#2-1-BeanFactory" class="headerlink" title="2.1 BeanFactory"></a>2.1 BeanFactory</h3><ul><li>Spring Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，也即 IOC 容器为开发者管理对象间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多的 IOC 容器的实现供用户选择和使用，其相互关系如下：</li></ul><p><img src="http://pdwm7er91.bkt.clouddn.com/BeanFactory.png" alt="图1.1 Bean创建类关系图"></p><ul><li>其中 <code>BeanFactory</code> 作为最顶层的一个接口类，它定义了 IOC 容器的基本功能规范，<code>BeanFactory</code> 有三个子类：<code>ListableBeanFactory</code>、<code>HierarchicalBeanFactory</code> 和 <code>AutowireCapableBeanFactory</code>。但是从上图中我们可以发现最终的默认实现类是 <strong><code>DefaultListableBeanFactory</code></strong>，他实现了所有的接口。</li><li>其中<code>ListableBeanFactory</code> 接口表示这些 Bean 是可列表的，而<code>HierarchicalBeanFactory</code> 表示的是这些 Bean 是有继承关系的，也就是每个 Bean 有可能有父 Bean。<code>AutowireCapableBeanFactory</code> 接口定义 Bean 的自动装配规则。这四个接口共同定义了 Bean 的集合、Bean 之间的关系、以及 Bean 行为.</li></ul><h4 id="2-1-1-BeanFactory-java中的方法"><a href="#2-1-1-BeanFactory-java中的方法" class="headerlink" title="2.1.1 BeanFactory.java中的方法"></a>2.1.1 BeanFactory.java中的方法</h4><ul><li>BeanFactory 作为最基本的 IOC 容器接口,它的方法如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对 FactoryBean 的转义定义,因为如果使用 Bean 的名字检索 Factory 得到的对象是工厂生成的对象,</span></span><br><span class="line">    <span class="comment">// 如果需要得到工厂本身,需要转义</span></span><br><span class="line">    String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br><span class="line">    <span class="comment">// 根据 bean 的名字,获取在 IOC 容器中得到 bean 实例</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">// 根据 class 的类型获取 bean 的实例</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">//根据 bean 的名字和 Class 类型来得到 bean 实例，增加了类型安全验证机制。</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    <span class="comment">//提供对 bean 的检索，看看是否在 IOC 容器有这个名字的 bean</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="comment">// 根据 bean 名字得到 bean 实例，并同时判断这个 bean 是不是单例</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    <span class="comment">// 得到 bean 的别名，如果根据别名检索，那么其原名也会被检索出来</span></span><br><span class="line">    String[] getAliases(String name);</span><br><span class="line">    <span class="comment">//得到 bean 实例的 Class 类型</span></span><br><span class="line">    Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 BeanFactory 里只对 IOC 容器的基本行为作了定义，根本不关心你的 bean 是如何定义怎样加载的。正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。</li><li><strong>ApplicationContext</strong> 是 Spring 提供的一个高级的 IOC 容器实现，它除了能够提供 IOC 容器的基本功能外，还为用户提供了以下的附加服务:<ol><li>支持信息源，可以实现国际化。（实现 MessageSource 接口）</li><li>访问资源。(实现 ResourcePatternResolver 接口，这个后面要讲)</li><li>支持应用事件。(实现 ApplicationEventPublisher 接口)</li></ol></li></ul><h3 id="2-2-BeanDefinition"><a href="#2-2-BeanDefinition" class="headerlink" title="2.2 BeanDefinition"></a>2.2 BeanDefinition</h3><ul><li>SpringIOC 容器管理了我们定义的各种 Bean 对象及其相互的关系，Bean 对象在 Spring 实现中是以<code>BeanDefinition</code> 来描述的，其继承体系如下：</li></ul><p><img src="http://pdwm7er91.bkt.clouddn.com/BeanDefinition.png" alt="图1.2 BeanDefinition体系结构图"></p><ul><li>Bean 的解析主要就是对 Spring 配置文件的解析。</li></ul><h2 id="3-IOC-容器的初始化"><a href="#3-IOC-容器的初始化" class="headerlink" title="3. IOC 容器的初始化"></a>3. IOC 容器的初始化</h2><ul><li>IOC 容器的初始化包括 BeanDefinition 的 Resource <strong>定位、载入、注册</strong>这三个基本的过程。我们以ApplicationContext 为例讲解，ApplicationContext 系列容器也许是我们最熟悉的，因为 web 项目中使用的 XmlWebApplicationContext 就属于这个继承体系，还有 ClasspathXmlApplicationContext 等，其继承体系如下图所示：</li></ul><p><img src="http://pdwm7er91.bkt.clouddn.com/ClassPathXmlApplicationContext.png" alt="图1.3 ClassPathXmlApplicationContext 继承体系图"></p><ul><li>下面我们分析下的 <strong>ClassPathXmlApplicationContext</strong> 容器<strong>创建</strong>过程:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br></pre></td></tr></table></figure><h3 id="3-1-调用构造函数"><a href="#3-1-调用构造函数" class="headerlink" title="3.1. 调用构造函数"></a>3.1. 调用构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实际上调用的是:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        setConfigLocations(configLocations);</span><br><span class="line">        <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            refresh();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-设置资源加载器和资源定位"><a href="#3-2-设置资源加载器和资源定位" class="headerlink" title="3.2. 设置资源加载器和资源定位"></a>3.2. 设置资源加载器和资源定位</h3><ol><li><strong>调用父类容器的构造方法(<code>super(parent)</code>方法)为容器设置好 Bean 资源加载器。</strong></li></ol><ul><li>从<strong><code>super(parent)</code></strong>方法往上一级找,直到 <strong>AbstractApplicationContext</strong> 的源码可以看到做了如下工作:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 为了避免应用程序在 Weblogic8.1 关闭时出现类加载异常加载问题，加载 IoC 容</span></span><br><span class="line">        <span class="comment">// 器关闭事件(ContextClosedEvent)类</span></span><br><span class="line">        ContextClosedEvent.class.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取一个 Spring Source 的加载器用于读入 Spring Bean 定义资源文件</span></span><br><span class="line">        <span class="comment">// Spring 资源加载器，其 getResource(String location)方法用于载入资源</span></span><br><span class="line">        <span class="keyword">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        setParent(parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>调用父类 AbstractRefreshableConfigApplicationContext 的 setConfigLocations(configLocations)方法设置 Bean 定义资源文件的定位路径:</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(@Nullable String... locations)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Assert.noNullElements(locations, <span class="string">"Config locations must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">            <span class="comment">// resolvePath 为同一个类中将字符串解析为路径的方法</span></span><br><span class="line">            <span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>AbstractApplicationContext 的 refresh 函数载入 Bean 定义过程：</strong></li></ol><ul><li>Spring IOC 容器对 Bean 定义资源的载入是从 refresh()函数开始的，refresh()是一个模板方法，refresh()方法的作用是：在创建 IOC 容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在 refresh 之后使用的是新建立起来的 IOC 容器。refresh 的作用类似于对 IOC 容器的重启，在新建立好的容器中对容器进行初始化，对 Bean 定义资源进行载入.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    <span class="comment">//告诉子类启动 refreshBeanFactory()方法，</span></span><br><span class="line">    <span class="comment">// Bean 定义资源文件的载入从子类的 refreshBeanFactory()方法启动</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">    prepareBeanFactory(beanFactory);</span><br><span class="line">    ......</span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    refreshBeanFactory(); <span class="comment">// 是个抽象方法,在子类中实现</span></span><br><span class="line">    <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConfigurableListableBeanFactory.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hasBeanFactory()) &#123; &#123;<span class="comment">//如果已经有容器，销毁容器中的 bean，关闭容器</span></span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建 IOC 容器</span></span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        <span class="comment">// 调用载入 Bean 定义的方法，主要这里又使用了一个委派模式</span></span><br><span class="line">        <span class="comment">// 在当前类中只定义了抽象的 loadBeanDefinitions方法，具体的实现调用子类容器</span></span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractXmlApplicationContext.java(子类)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span>  BeansException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 XmlBeanDefinitionReader，即创建 Bean 读取器，并通过回调设置到容器中去，</span></span><br><span class="line">    <span class="comment">// 容器使用该读取器读取 Bean 定义资源</span></span><br><span class="line">    XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">    <span class="comment">// 为 Bean 读取器设置 Spring 资源加载器</span></span><br><span class="line">    beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">    beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">    beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">    <span class="comment">//Bean 读取器真正实现加载的方法</span></span><br><span class="line">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再往里这里就不写了,自己研究吧QAQ</p></blockquote><h2 id="4-总结-IOC-初始化过程"><a href="#4-总结-IOC-初始化过程" class="headerlink" title="4. 总结 IOC 初始化过程"></a>4. 总结 IOC 初始化过程</h2><ol><li><strong>初始化的入口在容器实现中的 refresh()调用来完成</strong></li><li><p><strong>对 bean 定义载入 IOC 容器使用的方法是 loadBeanDefinition, 其中的大致过程如下：</strong></p><ul><li><strong><em>通过ResourceLoader 来完成资源文件位置的<code>定位</code>，DefaultResourceLoader 是默认的实现</em></strong>，同时上下文本身就给了ResourceLoader 的实现，可以从类路径，文件系统,URL 等方式来定为资源位置。</li><li>如果是 XmlBeanFactory 作为 IOC 容器，那么需要为它指定 bean 定义的资源，也就是说bean 定义文件时通过抽象成 Resource 来被 IOC 容器处理的，容器通过 BeanDefinitionReader 来完成定义信息的解析和 Bean 信息的注册,往往使用的是 XmlBeanDefinitionReader 来解析 bean 的 xml 定义文件</li><li>实际的处理过程是委托给BeanDefinitionParserDelegate来完成的，从而得到bean的定义信息，这些信息在 Spring 中使用BeanDefinition 对象来表示<blockquote><p>loadBeanDefinition, RegisterBeanDefinition 这些相关方法-他们都是为处理 BeanDefinitin 服务的.</p></blockquote></li><li>容器解析得到 BeanDefinitionIoC 以后，需要把它在 IOC 容器中<code>注册</code>，这由 IOC 实现 BeanDefinitionRegistry 接口来实现。<strong><em>注册过程就是在 IOC 容器内部维护的一个HashMap 来保存得到的 BeanDefinition 的过程</em></strong>。这个 HashMap 是 IOC 容器持有 bean 信息的场所，以后对bean 的操作都是围绕这个 HashMap 来实现的.</li></ul></li><li><p>然后我们就可以通过 BeanFactory 和 ApplicationContext 来享受到 SpringIOC 的服务了,在使用 IOC容器的时候，我们注意到除了少量粘合代码，绝大多数以正确 IOC 风格编写的应用程序代码完全不用关心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本的策略是把工厂放到已知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。Spring本身提供了对声明式载入 web 应用程序用法的应用程序上下文,并将其存储在 ServletContext 中的框架实现。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring源码学习–-IOC&quot;&gt;&lt;a href=&quot;#Spring源码学习–-IOC&quot; class=&quot;headerlink&quot; title=&quot;Spring源码学习– IOC&quot;&gt;&lt;/a&gt;Spring源码学习– IOC&lt;/h1&gt;&lt;h2 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1. 定义&quot;&gt;&lt;/a&gt;1. 定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IOC(Inversion of Control)控制反转:&lt;/strong&gt; 控制反转就是把原先我们代码里面需要实现的对象创建,依赖的代码,反转给容器来帮忙实现.那么必然的我们需要创建一个容器,同时需要一种描述来让容器知道需要创建的对象与对象之间的关系.这个描述最具体的表现就是我们可配置的文件.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DI(Dependency Injection)依赖注入:&lt;/strong&gt; 就是指对象是被动接受依赖类而不是自己去找,换句话说就是指对象不是从容器中查找它的依赖类,而是在容器实例化对象的时候主动将它依赖的类注入给它.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之--代理模式(三)</title>
    <link href="http://yoursite.com/2018/08/19/cglib-proxy/"/>
    <id>http://yoursite.com/2018/08/19/cglib-proxy/</id>
    <published>2018-08-19T04:05:22.000Z</published>
    <updated>2018-08-19T06:34:51.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h1><ul><li>JDK代理要求被代理类必须实现接口,有很强的局限性.而CGLIB动态代理则没有此强制性要求.简单的说,CGLIB会让生成的代理类继承被代理类,并在代理类中对代理方法进行强制处理(前置处理,后置处理等).在CGLIB底层,其实是借助了ASM这个强大的Java字节码生成框架.</li></ul><a id="more"></a><h2 id="1-代码示例"><a href="#1-代码示例" class="headerlink" title="1. 代码示例"></a>1. 代码示例</h2><h3 id="1-1-RealObject-java"><a href="#1-1-RealObject-java" class="headerlink" title="1.1 RealObject.java"></a>1.1 RealObject.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doSomething."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"somethingElse: "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-CglibProxyHandler-java"><a href="#1-2-CglibProxyHandler-java" class="headerlink" title="1.2 CglibProxyHandler.java"></a>1.2 CglibProxyHandler.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyHandler</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置生成的代理子类要继承的父类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="comment">// 设置回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.生成源代码</span></span><br><span class="line"><span class="comment">         * 2. 编译成class文件</span></span><br><span class="line"><span class="comment">         * 3.加载到JVM中并返回被代理对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理开始-----------"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个obj的引用是由CGLib给new出来的</span></span><br><span class="line"><span class="comment">         * cglib new出来的对象,是代理对象的子类(继承了我们自己写的那个类)</span></span><br><span class="line"><span class="comment">         * OOP中,在new 子类之前,实际上默认先调用了super()方法,所以new 子类的同时 new了父类,间接地获取了父类的引用</span></span><br><span class="line"><span class="comment">         * 子类重写了父类的所有方法,改变子类属性的同时是可以间接操作父类属性的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        methodProxy.invokeSuper(obj,args);</span><br><span class="line">        System.out.println(<span class="string">"代理结束-----------"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-CglibProxyDemo-java"><a href="#1-3-CglibProxyDemo-java" class="headerlink" title="1.3 CglibProxyDemo.java"></a>1.3 CglibProxyDemo.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(RealObject realObject)</span> </span>&#123;</span><br><span class="line">        realObject.doSomething();</span><br><span class="line">        realObject.somethingElse(<span class="string">"hahaha~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       RealObject obj = (RealObject) <span class="keyword">new</span> CglibProxyHandler().getInstance(RealObject.class);</span><br><span class="line">       consumer(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-输出结果"><a href="#1-4-输出结果" class="headerlink" title="1.4 输出结果"></a>1.4 输出结果</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代理开始~</span><br><span class="line">doSomething.</span><br><span class="line">代理结束!</span><br><span class="line">代理开始~</span><br><span class="line">somethingElse: hahaha~</span><br><span class="line">代理结束!</span><br></pre></td></tr></table></figure><h2 id="2-三种代理比较"><a href="#2-三种代理比较" class="headerlink" title="2. 三种代理比较"></a>2. 三种代理比较</h2><table><thead><tr><th>代理方法</th><th>实现</th><th>优点</th><th>缺点</th><th>特点</th></tr></thead><tbody><tr><td>JDK静态代理</td><td>代理类与委托类实现同一接口，并且在代理类中需要硬编码接口</td><td>实现简单，容易理解</td><td>代理类需要硬编码接口，在实际应用中可能会导致重复编码，浪费存储空间并且效率很低</td><td>好像没啥特点</td></tr><tr><td>JDK动态代理</td><td>代理类与委托类实现同一接口，主要是通过代理类实现InvocationHandler并重写invoke方法来进行动态代理的，在invoke方法中将对方法进行增强处理</td><td>不需要硬编码接口，代码复用率高</td><td>只能够代理实现了接口的委托类</td><td>底层使用反射机制进行方法的调用 </td></tr><tr><td>CGLIB动态代理</td><td>代理类将委托类作为自己的父类并为其中的非final委托方法创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过super调用委托方法；另一个是代理类独有的方法。在代理方法中，它会判断是否存在实现了MethodInterceptor接口的对象，若存在则将调用intercept方法对委托方法进行代理</td><td>可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口</td><td>不能对final类以及final方法进行代理</td><td>底层将方法全部存入一个数组中，通过数组索引直接进行方法调用</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CGLIB动态代理&quot;&gt;&lt;a href=&quot;#CGLIB动态代理&quot; class=&quot;headerlink&quot; title=&quot;CGLIB动态代理&quot;&gt;&lt;/a&gt;CGLIB动态代理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;JDK代理要求被代理类必须实现接口,有很强的局限性.而CGLIB动态代理则没有此强制性要求.简单的说,CGLIB会让生成的代理类继承被代理类,并在代理类中对代理方法进行强制处理(前置处理,后置处理等).在CGLIB底层,其实是借助了ASM这个强大的Java字节码生成框架.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之--代理模式(二)</title>
    <link href="http://yoursite.com/2018/08/18/jdk-proxy/"/>
    <id>http://yoursite.com/2018/08/18/jdk-proxy/</id>
    <published>2018-08-17T16:11:46.000Z</published>
    <updated>2018-08-19T06:40:21.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><ul><li>java中的jdk动态代理可以动态地创建代理并动态地处理对所代理方法的调用.</li><li>在动态代理上所做的所有调用都会被重定向到单一的调用处理器上,它的工作是揭示调用的类型并做相应的处理.</li><li>代理类实现 <strong><code>InvocationHandler</code></strong> 接口,通过调用<strong><code>Proxy.newProxyInstance()</code></strong>创建动态代理.</li></ul><a id="more"></a><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>我们将对上一篇中的代码示例进行改造.</li></ul><h3 id="1-Interface-java"><a href="#1-Interface-java" class="headerlink" title="1. Interface.java"></a>1. Interface.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-RealObject-java"><a href="#2-RealObject-java" class="headerlink" title="2. RealObject.java"></a>2. RealObject.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doSomething."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"somethingElse: "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-DynamicProxyHandler-java"><a href="#3-DynamicProxyHandler-java" class="headerlink" title="3. (+)DynamicProxyHandler.java"></a>3. (+)DynamicProxyHandler.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span> <span class="params">(Object proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"*** proxy: "</span> + proxy.getClass() + </span><br><span class="line">        <span class="string">",method: "</span> + method + <span class="string">",args: "</span> + args);</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">                System.out.println(<span class="string">" "</span> + arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(proxied,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SimpleDynamiProxy-java"><a href="#4-SimpleDynamiProxy-java" class="headerlink" title="4. (+)SimpleDynamiProxy.java"></a>4. (+)SimpleDynamiProxy.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDynamiProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface iface)</span> </span>&#123;</span><br><span class="line">        iface.doSomething();</span><br><span class="line">        iface.somethingElse(<span class="string">"hehehehe~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealObject realObject = <span class="keyword">new</span> RealObject();</span><br><span class="line">        Interface proxy = (Interface) Proxy.newProxyInstance(</span><br><span class="line">                Interface.class.getClassLoader(), <span class="comment">// 类加载器</span></span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;Interface.class&#125;, <span class="comment">// 代理对象要实现的接口列表</span></span><br><span class="line">                <span class="keyword">new</span> DynamicProxyHandler(realObject)); <span class="comment">// InvocationHandler的一个实现</span></span><br><span class="line">        consumer(proxy);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 原理:</span></span><br><span class="line"><span class="comment">         * 1.拿到被代理对象的引用,然后获取它的接口</span></span><br><span class="line"><span class="comment">         * 2.JDK代理重新生成一个类,同时实现了我们所给的代理对象所实现的接口</span></span><br><span class="line"><span class="comment">         * 3.把被代理对象的引用也拿到了</span></span><br><span class="line"><span class="comment">         * 4.重新动态生成一个class</span></span><br><span class="line"><span class="comment">         * 5.然后编译</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取字节码内容</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = ProxyGenerator.generateProxyClass(<span class="string">"$Proxy0"</span>,<span class="keyword">new</span> Class[]&#123;RealObject.class&#125;);</span><br><span class="line">            FileOutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"$Proxy0.class"</span>);</span><br><span class="line">            os.write(data);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-输出结果为"><a href="#5-输出结果为" class="headerlink" title="5. 输出结果为:"></a>5. 输出结果为:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*** proxy: class com.sun.proxy.$Proxy0,method: public abstract void my.test.jdk_proxy.Interface.doSomething(),args: null</span><br><span class="line">doSomething.</span><br><span class="line">*** proxy: class com.sun.proxy.$Proxy0,method: public abstract void my.test.jdk_proxy.Interface.somethingElse(java.lang.String),args: [Ljava.lang.Object;@4b67cf4d</span><br><span class="line"> hehehehe~</span><br><span class="line">somethingElse: hehehehe~</span><br></pre></td></tr></table></figure><h3 id="6-Proxy0-class分析"><a href="#6-Proxy0-class分析" class="headerlink" title="6. $Proxy0.class分析"></a>6. $Proxy0.class分析</h3><ul><li>将<code>$Proxy0.class</code>文件反编译,结果如下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"><span class="keyword">import</span> my.test.jdk_proxy.RealObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">RealObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m9;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m7;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m8;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m10;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m9, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> var1)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m7, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | InterruptedException | Error var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var4;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> var1, <span class="keyword">int</span> var3)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m6, <span class="keyword">new</span> Object[]&#123;var1, var3&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | InterruptedException | Error var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Class)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m8, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m10, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m5, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | InterruptedException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m4 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"doSomething"</span>);</span><br><span class="line">            m9 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"notify"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"somethingElse"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m7 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"wait"</span>, Long.TYPE);</span><br><span class="line">            m6 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"wait"</span>, Long.TYPE, Integer.TYPE);</span><br><span class="line">            m8 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"getClass"</span>);</span><br><span class="line">            m10 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"notifyAll"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">            m5 = Class.forName(<span class="string">"my.test.jdk_proxy.RealObject"</span>).getMethod(<span class="string">"wait"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理类生成的过程主要包括两部分：</li></ul><ol><li>代理类字节码生成</li><li>把字节码通过传入的类加载器加载到虚拟机中</li></ol><ul><li>代理类的大概结构包括4部分：</li></ul><ol><li><strong>静态字段</strong>：被代理的接口所有方法都有一个对应的静态方法变量；</li><li><strong>静态块</strong>：主要是通过反射初始化静态方法变量；</li><li><strong>具体每个代理方法</strong>：逻辑都差不多就是 h.invoke，主要是调用我们定义好的invocatinoHandler逻辑,触发目标对象target上对应的方法;</li><li><strong>构造函数</strong>：从这里传入我们InvocationHandler逻辑；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JDK动态代理&quot;&gt;&lt;a href=&quot;#JDK动态代理&quot; class=&quot;headerlink&quot; title=&quot;JDK动态代理&quot;&gt;&lt;/a&gt;JDK动态代理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;java中的jdk动态代理可以动态地创建代理并动态地处理对所代理方法的调用.&lt;/li&gt;
&lt;li&gt;在动态代理上所做的所有调用都会被重定向到单一的调用处理器上,它的工作是揭示调用的类型并做相应的处理.&lt;/li&gt;
&lt;li&gt;代理类实现 &lt;strong&gt;&lt;code&gt;InvocationHandler&lt;/code&gt;&lt;/strong&gt; 接口,通过调用&lt;strong&gt;&lt;code&gt;Proxy.newProxyInstance()&lt;/code&gt;&lt;/strong&gt;创建动态代理.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之--代理模式(一)</title>
    <link href="http://yoursite.com/2018/08/17/proxy/"/>
    <id>http://yoursite.com/2018/08/17/proxy/</id>
    <published>2018-08-17T11:23:13.000Z</published>
    <updated>2018-08-19T06:40:30.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念认知"><a href="#1-概念认知" class="headerlink" title="1. 概念认知"></a>1. 概念认知</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><ul><li><strong>代理模式</strong>: 给某一个对象提供一个代理或占位符,并由代理对象来控制对原对象的访问.<blockquote><p><strong>Proxy Pattern</strong>: Provide a surrogate or placeholder for another object to control access to it.</p></blockquote></li></ul><a id="more"></a><h3 id="1-2-模型"><a href="#1-2-模型" class="headerlink" title="1.2 模型"></a>1.2 模型</h3><p><img src="http://on-img.com/chart_image/5b783071e4b08d3622b3e7bc.png" alt="图 1.1 代理模式模型图"></p><ul><li><strong>由 图 1.1可知,代理模式有三个角色:</strong></li></ul><ol><li><strong><code>Interface</code></strong>(接口角色): 声明了真实对象和代理对象的共同接口,使在任何使用真实对象的地方都可以使用代理对象.</li><li><strong><code>Proxy</code></strong>(代理角色): 包含对真实对象的引用,可以在任何时候操作真实对象.</li><li><strong><code>RealObject</code></strong>(真实对象角色): 定义了代理角色所代表的的真实对象,实现了真实的业务操作,客户端可以通过代理主题角色间接调用真实对象中定义的操作.</li></ol><h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><ol><li>两个参与者:执行者,被代理人.</li><li>对于被代理人来说,这件事是一定要做的,但是自己不想做或没有时间做,找代理.</li><li>需要获取到被代理人的个人资料.</li></ol><h3 id="1-4-优缺点"><a href="#1-4-优缺点" class="headerlink" title="1.4 优缺点"></a>1.4 优缺点</h3><ol><li><strong>优点:</strong> </li></ol><ul><li>能够协调调用者和被调用者,在一定程度上降低了系统耦合度.</li><li>可以针对接口进行编程,增加和更换代码无须修改源代码,符合开闭原则,具有较好的灵活性和可扩展性.</li></ul><p>2.<strong> 缺点:</strong></p><ul><li>由于增加了代理对象,因此有些类型的代理模式可能会造成请求的处理速度变慢.</li></ul><h2 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h2><h3 id="2-1-Interface-java"><a href="#2-1-Interface-java" class="headerlink" title="2.1 Interface.java"></a>2.1 Interface.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String args)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-RealObject-java"><a href="#2-2-RealObject-java" class="headerlink" title="2.2 RealObject.java"></a>2.2 RealObject.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">implements</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doSomething."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"somethingElse: "</span> + args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-SimpleProxy-java"><a href="#2-2-SimpleProxy-java" class="headerlink" title="2.2 SimpleProxy.java"></a>2.2 SimpleProxy.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxy</span> <span class="keyword">implements</span> <span class="title">Interface</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Interface proxied;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleProxy</span><span class="params">(Interface proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SimpleProxy doSomething."</span>);</span><br><span class="line">        proxied.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">somethingElse</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SimpleProxy somethingElse:"</span> + args);</span><br><span class="line">        proxied.somethingElse(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-SimpleProxyDemo-java"><a href="#2-3-SimpleProxyDemo-java" class="headerlink" title="2.3 SimpleProxyDemo.java"></a>2.3 SimpleProxyDemo.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(Interface iface)</span> </span>&#123;</span><br><span class="line">        iface.doSomething();</span><br><span class="line">        iface.somethingElse(<span class="string">"bonobo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        consumer(<span class="keyword">new</span> SimpleProxy(<span class="keyword">new</span> RealObject()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-代码输出结果为"><a href="#2-4-代码输出结果为" class="headerlink" title="2.4 代码输出结果为:"></a>2.4 代码输出结果为:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleProxy doSomething.</span><br><span class="line">doSomething.</span><br><span class="line">SimpleProxy somethingElse:biubiubiu~</span><br><span class="line">somethingElse: biubiubiu~</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概念认知&quot;&gt;&lt;a href=&quot;#1-概念认知&quot; class=&quot;headerlink&quot; title=&quot;1. 概念认知&quot;&gt;&lt;/a&gt;1. 概念认知&lt;/h2&gt;&lt;h3 id=&quot;1-1-定义&quot;&gt;&lt;a href=&quot;#1-1-定义&quot; class=&quot;headerlink&quot; title=&quot;1.1 定义&quot;&gt;&lt;/a&gt;1.1 定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代理模式&lt;/strong&gt;: 给某一个对象提供一个代理或占位符,并由代理对象来控制对原对象的访问.&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Proxy Pattern&lt;/strong&gt;: Provide a surrogate or placeholder for another object to control access to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之--工厂模式(二)</title>
    <link href="http://yoursite.com/2018/08/16/factory-method/"/>
    <id>http://yoursite.com/2018/08/16/factory-method/</id>
    <published>2018-08-16T07:42:47.000Z</published>
    <updated>2018-08-19T12:36:25.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2.工厂方法模式"></a>2.工厂方法模式</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><ul><li><strong>工厂方法模式(Factory Method Pattern)：</strong>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)或多态工厂模式(Polymorphic Factory Pattern)。</li></ul><a id="more"></a><h3 id="2-2-模型结构图"><a href="#2-2-模型结构图" class="headerlink" title="2.2 模型结构图"></a>2.2 模型结构图</h3><p><img src="http://on-img.com/chart_image/5b792108e4b0be50eae546ba.png" alt="图1.2 工厂方法模式结构图"></p><h3 id="2-3-代码示例"><a href="#2-3-代码示例" class="headerlink" title="2.3 代码示例"></a>2.3 代码示例</h3><ul><li>利用工厂模式设计一个日志记录器,结构如下:</li></ul><p><img src="http://on-img.com/chart_image/5b79565ee4b0555b39e9b9a1.png" alt="图1.3 日志记录器结构图"></p><h4 id="2-3-1-Logger-java"><a href="#2-3-1-Logger-java" class="headerlink" title="2.3.1 Logger.java"></a>2.3.1 Logger.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-FileLogger-java"><a href="#2-3-2-FileLogger-java" class="headerlink" title="2.3.2 FileLogger.java"></a>2.3.2 FileLogger.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">implements</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件日志记录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-FileLogger-java"><a href="#2-3-3-FileLogger-java" class="headerlink" title="2.3.3 FileLogger.java"></a>2.3.3 FileLogger.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoggerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">createLogger</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-FileLoggerFactory-java"><a href="#2-3-4-FileLoggerFactory-java" class="headerlink" title="2.3.4 FileLoggerFactory.java"></a>2.3.4 FileLoggerFactory.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLoggerFactory</span> <span class="keyword">implements</span> <span class="title">LoggerFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">createLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建文件日志记录对象</span></span><br><span class="line">        Logger logger = <span class="keyword">new</span> FileLogger();</span><br><span class="line">        <span class="comment">// 创建文件代码...</span></span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-5-XMLUtil-java"><a href="#2-3-5-XMLUtil-java" class="headerlink" title="2.3.5 XMLUtil.java"></a>2.3.5 XMLUtil.java</h4><ul><li>通过配置文件方式获取类名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法用于从XML配置文件中提取具体类的类名,并返回一个实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建DOM文档对象</span></span><br><span class="line">            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder builder = dFactory.newDocumentBuilder();</span><br><span class="line">            Document doc;</span><br><span class="line">            doc = builder.parse(<span class="keyword">new</span> File(<span class="string">"config.xml"</span>));</span><br><span class="line">            <span class="comment">// 获取包含类名的文本节点</span></span><br><span class="line">            NodeList nodeList = doc.getElementsByTagName(<span class="string">"className"</span>);</span><br><span class="line">            Node classNode = nodeList.item(<span class="number">0</span>).getFirstChild();</span><br><span class="line">            String cName = classNode.getNodeValue();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过类名生成实例对象并返回</span></span><br><span class="line">            Class c = Class.forName(<span class="string">"factory.factorymethod."</span>+cName);</span><br><span class="line">            Object obj = c.newInstance();</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-6-config-xml"><a href="#2-3-6-config-xml" class="headerlink" title="2.3.6 config.xml"></a>2.3.6 config.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?xml version="1.0" ?&gt;</span><br><span class="line"><span class="comment">&lt;!-- config.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">className</span>&gt;</span>FileLoggerFactory<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-7-Client-java"><a href="#2-3-7-Client-java" class="headerlink" title="2.3.7 Client.java"></a>2.3.7 Client.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LoggerFactory factory;</span><br><span class="line">        Logger logger;</span><br><span class="line">        factory = (LoggerFactory) XMLUtil.getBean();</span><br><span class="line">        logger = factory.createLogger();</span><br><span class="line">        logger.writeLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-工厂方法模式总结"><a href="#2-4-工厂方法模式总结" class="headerlink" title="2.4 工厂方法模式总结"></a>2.4 工厂方法模式总结</h3><h4 id="2-4-1-优点"><a href="#2-4-1-优点" class="headerlink" title="2.4.1 优点"></a>2.4.1 优点</h4><ul><li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够让工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模式之所以又被称为多态工厂模式，就正是因为所有的具体工厂类都具有同一抽象父类。</li><li>使用工厂方法模式的另一个优点是在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了，这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ul><h4 id="2-4-2-缺点"><a href="#2-4-2-缺点" class="headerlink" title="2.4.2 缺点"></a>2.4.2 缺点</h4><ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul><h4 id="2-4-3-适用场景"><a href="#2-4-3-适用场景" class="headerlink" title="2.4.3 适用场景"></a>2.4.3 适用场景</h4><ul><li>客户端不知道它所需要的对象的类。在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建，可将具体工厂类的类名存储在配置文件或数据库中。</li><li>抽象工厂类通过其子类来指定创建哪个对象。在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li></ul><h2 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h2><ul><li>抽象工厂模式为创建一组对象提供了一种解决方案。与工厂方法模式相比，抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品。</li></ul><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><ul><li><strong>抽象工厂模式(Abstract Factory Pattern)：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，它是一种对象创建型模式。</li></ul><h3 id="3-2-抽象工厂模式总结"><a href="#3-2-抽象工厂模式总结" class="headerlink" title="3.2 抽象工厂模式总结"></a>3.2 抽象工厂模式总结</h3><h4 id="3-2-1-优点"><a href="#3-2-1-优点" class="headerlink" title="3.2.1 优点"></a>3.2.1 优点</h4><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</li><li>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</li></ul><h4 id="3-2-2-缺点"><a href="#3-2-2-缺点" class="headerlink" title="3.2.2 缺点"></a>3.2.2 缺点</h4><ul><li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</li></ul><h4 id="3-2-3-适用场景"><a href="#3-2-3-适用场景" class="headerlink" title="3.2.3 适用场景"></a>3.2.3 适用场景</h4><ul><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是很重要的，用户无须关心对象的创建过程，将对象的创建和使用解耦。</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。可以通过配置文件等方式来使得用户可以动态改变产品族，也可以很方便地增加新的产品族。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2-工厂方法模式&quot;&gt;&lt;a href=&quot;#2-工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;2.工厂方法模式&quot;&gt;&lt;/a&gt;2.工厂方法模式&lt;/h2&gt;&lt;h3 id=&quot;2-1-定义&quot;&gt;&lt;a href=&quot;#2-1-定义&quot; class=&quot;headerlink&quot; title=&quot;2.1 定义&quot;&gt;&lt;/a&gt;2.1 定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工厂方法模式(Factory Method Pattern)：&lt;/strong&gt;定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)或多态工厂模式(Polymorphic Factory Pattern)。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之--工厂模式(一)</title>
    <link href="http://yoursite.com/2018/08/15/factory/"/>
    <id>http://yoursite.com/2018/08/15/factory/</id>
    <published>2018-08-15T06:39:59.000Z</published>
    <updated>2018-08-19T07:41:42.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><ul><li><strong>简单工厂模式(Simple Factory Pattern)：</strong>定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，因此简单工厂模式又被称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。</li></ul><a id="more"></a><h3 id="1-2-模型结构图"><a href="#1-2-模型结构图" class="headerlink" title="1.2 模型结构图"></a>1.2 模型结构图</h3><p><img src="http://on-img.com/chart_image/5b791247e4b067df5a0faba0.png" alt="图1.1 简单工厂模式结构图"></p><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例</h3><h4 id="1-3-1-Product-java"><a href="#1-3-1-Product-java" class="headerlink" title="1.3.1 Product.java"></a>1.3.1 Product.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 所有产品类的公共业务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodSame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 公共业务的实现</span></span><br><span class="line">        System.out.println(<span class="string">"开始生产产品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 声明抽象业务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodDiff</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-ConcreteProductA-java"><a href="#1-3-2-ConcreteProductA-java" class="headerlink" title="1.3.2 ConcreteProductA.java"></a>1.3.2 ConcreteProductA.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodDiff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务方法的实现</span></span><br><span class="line">        System.out.println(<span class="string">"产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-ConcreteProductB-java"><a href="#1-3-3-ConcreteProductB-java" class="headerlink" title="1.3.3 ConcreteProductB.java"></a>1.3.3 ConcreteProductB.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodDiff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务方法的实现</span></span><br><span class="line">        System.out.println(<span class="string">"产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-Factory-java"><a href="#1-3-4-Factory-java" class="headerlink" title="1.3.4 Factory.java"></a>1.3.4 Factory.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">getProduct</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"A"</span>.equalsIgnoreCase(arg)) &#123;</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProductA();</span><br><span class="line">            <span class="comment">// 初始化设置product</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"B"</span>.equalsIgnoreCase(arg)) &#123;</span><br><span class="line">            product = <span class="keyword">new</span> ConcreteProductB();</span><br><span class="line">            <span class="comment">// 初始化设置product</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5-Client-java"><a href="#1-3-5-Client-java" class="headerlink" title="1.3.5 Client.java"></a>1.3.5 Client.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product product;</span><br><span class="line">        product = Factory.getProduct(<span class="string">"A"</span>);</span><br><span class="line">        product.methodSame();</span><br><span class="line">        product.methodDiff();</span><br><span class="line">        product = Factory.getProduct(<span class="string">"B"</span>);</span><br><span class="line">        product.methodSame();</span><br><span class="line">        product.methodDiff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-6-输出结果"><a href="#1-3-6-输出结果" class="headerlink" title="1.3.6 输出结果"></a>1.3.6 输出结果</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始生产产品</span><br><span class="line">我是产品A</span><br><span class="line">开始生产产品</span><br><span class="line">我是产品B</span><br></pre></td></tr></table></figure><h3 id="1-4-简单工厂模式总结"><a href="#1-4-简单工厂模式总结" class="headerlink" title="1.4 简单工厂模式总结"></a>1.4 简单工厂模式总结</h3><h4 id="1-4-1-简单工厂模式优点"><a href="#1-4-1-简单工厂模式优点" class="headerlink" title="1.4.1 简单工厂模式优点"></a>1.4.1 简单工厂模式优点</h4><ol><li>工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分离。</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</li></ol><h4 id="1-4-1-简单工厂模式缺点"><a href="#1-4-1-简单工厂模式缺点" class="headerlink" title="1.4.1 简单工厂模式缺点"></a>1.4.1 简单工厂模式缺点</h4><ol><li>由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受到影响。</li><li>使用简单工厂模式势必会增加系统中类的个数（引入了新的工厂类），增加了系统的复杂度和理解难度。</li><li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简单工厂模式&quot;&gt;&lt;a href=&quot;#1-简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;1. 简单工厂模式&quot;&gt;&lt;/a&gt;1. 简单工厂模式&lt;/h2&gt;&lt;h3 id=&quot;1-1-定义&quot;&gt;&lt;a href=&quot;#1-1-定义&quot; class=&quot;headerlink&quot; title=&quot;1.1 定义&quot;&gt;&lt;/a&gt;1.1 定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单工厂模式(Simple Factory Pattern)：&lt;/strong&gt;定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，因此简单工厂模式又被称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2018/06/01/hello-world/"/>
    <id>http://yoursite.com/2018/06/01/hello-world/</id>
    <published>2018-06-01T07:42:47.000Z</published>
    <updated>2018-08-19T08:20:47.805Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&lt;&lt;图解HTTP&gt;&gt;笔记--Web及网络基础</title>
    <link href="http://yoursite.com/2018/05/19/http01/"/>
    <id>http://yoursite.com/2018/05/19/http01/</id>
    <published>2018-05-19T15:48:41.000Z</published>
    <updated>2018-08-19T15:54:21.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web及网络基础"><a href="#Web及网络基础" class="headerlink" title="Web及网络基础"></a>Web及网络基础</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ul><li><strong>客户端（client）</strong>：通过发送请求获取服务器资源的Web浏览器等，都可以称为客户端。</li><li>Web使用HTTP(HyperText Transfer Protocol,超文本传输协议)完成从客户端到服务端等一系列运作流程，<strong>Web是建立在HTTP协议上通信的</strong>。</li><li>IP(Internet Protocol网际协议)位于网络层，作用是把各种数据包传送给对方。而要确保传送到对方，则需满足各类条件，其中两个重要的<strong>条件</strong>是：<ol><li>IP地址：指明节点被分配到的地址</li><li>MAC地址：指网卡所属的固定地址</li></ol></li></ul><a id="more"></a><blockquote><p>IP间通信依赖MAC地址，在进行中转时，采用ARP协议（Address Resolution Protocol，地址解析协议，可根据通信方的IP地址反查出对应的MAC地址）凭借MAC地址进行通信。</p></blockquote><ul><li><strong>DNS</strong>(Domain Name System)域名解析提供域名到IP地址之间的解析服务。</li></ul><h2 id="2-TCP-IP协议族各层作用："><a href="#2-TCP-IP协议族各层作用：" class="headerlink" title="2. TCP/IP协议族各层作用："></a>2. TCP/IP协议族各层作用：</h2><ul><li>应用层：应用层决定了向用户提供应用服务时通信的活动。(HTTP、FTP、DNS)</li><li>传输层：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。(TCP和UDP)</li><li>网络层：网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径到达对方计算机，并把数据包传送给对方。(IP)</li><li>链路层：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC(网络适配器即网卡)以及光纤等物理可见部分。</li></ul><h2 id="3-TCP-IP通信传输流："><a href="#3-TCP-IP通信传输流：" class="headerlink" title="3. TCP/IP通信传输流："></a>3. TCP/IP通信传输流：</h2><p><img src="http://otkx6qgz7.bkt.clouddn.com/01.png" alt="HTTP在客户端与服务器端的通信"></p><ul><li>客户端在应用层发出一个查看某个Web页面的HTTP请求；</li><li>在传输层（TCP协议）把从应用层收到的数据（HTTP请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层；</li><li>在网络层（IP协议），增加作为通信目的地的MAC地址后转发给链路层；至此，发送网络的通信请求就准备好了</li><li>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才算真正接收到由客户端发送过来的HTTP请求。</li><li>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息；反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web及网络基础&quot;&gt;&lt;a href=&quot;#Web及网络基础&quot; class=&quot;headerlink&quot; title=&quot;Web及网络基础&quot;&gt;&lt;/a&gt;Web及网络基础&lt;/h1&gt;&lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端（client）&lt;/strong&gt;：通过发送请求获取服务器资源的Web浏览器等，都可以称为客户端。&lt;/li&gt;
&lt;li&gt;Web使用HTTP(HyperText Transfer Protocol,超文本传输协议)完成从客户端到服务端等一系列运作流程，&lt;strong&gt;Web是建立在HTTP协议上通信的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;IP(Internet Protocol网际协议)位于网络层，作用是把各种数据包传送给对方。而要确保传送到对方，则需满足各类条件，其中两个重要的&lt;strong&gt;条件&lt;/strong&gt;是：&lt;ol&gt;
&lt;li&gt;IP地址：指明节点被分配到的地址&lt;/li&gt;
&lt;li&gt;MAC地址：指网卡所属的固定地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="HTPP" scheme="http://yoursite.com/tags/HTPP/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
